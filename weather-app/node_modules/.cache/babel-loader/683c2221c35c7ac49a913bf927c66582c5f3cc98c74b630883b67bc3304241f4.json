{"ast":null,"code":"import axios from 'axios';\n\n/**\r\n * Fetches weather data from Visual Crossing API\r\n * @param {string} location - Location name or coordinates (lat,lng)\r\n * @returns {Promise} - Promise containing weather data\r\n */\nexport const fetchWeather = async location => {\n  const API_KEY = process.env.REACT_APP_VISUAL_CROSSING_API_KEY || \"YOUR_VISUAL_CROSSING_API_KEY\"; // Use environment variable or fallback to placeholder\n\n  if (API_KEY === \"YOUR_VISUAL_CROSSING_API_KEY\") {\n    console.error(\"API Key not configured. Please set the REACT_APP_VISUAL_CROSSING_API_KEY environment variable.\");\n    throw new Error(\"API Key not configured\");\n  }\n  const URL = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}?unitGroup=metric&key=${API_KEY}`;\n  try {\n    const response = await axios.get(URL);\n\n    // Process and return the weather data in a more usable format\n    const {\n      currentConditions,\n      days,\n      resolvedAddress\n    } = response.data;\n    return {\n      current: {\n        temp: currentConditions.temp,\n        feelsLike: currentConditions.feelslike,\n        humidity: currentConditions.humidity,\n        windSpeed: currentConditions.windspeed,\n        conditions: currentConditions.conditions,\n        icon: currentConditions.icon,\n        precipProb: currentConditions.precipprob || 0,\n        datetime: currentConditions.datetime\n      },\n      location: resolvedAddress,\n      forecast: days.slice(0, 7).map(day => ({\n        datetime: day.datetime,\n        tempMax: day.tempmax,\n        tempMin: day.tempmin,\n        icon: day.icon,\n        conditions: day.conditions,\n        precipProb: day.precipprob || 0\n      })),\n      hourly: response.data.days[0].hours.map(hour => ({\n        datetime: hour.datetime,\n        temp: hour.temp,\n        icon: hour.icon,\n        conditions: hour.conditions,\n        precipProb: hour.precipprob || 0\n      }))\n    };\n  } catch (error) {\n    console.error(\"Error fetching weather data\", error);\n    throw error; // Re-throw to handle in components\n  }\n};\n\n/**\r\n * Fetches weather data using geolocation coordinates\r\n * @param {number} lat - Latitude\r\n * @param {number} lng - Longitude\r\n * @returns {Promise} - Promise containing weather data\r\n */\nexport const fetchWeatherByCoordinates = async (lat, lng) => {\n  const locationString = `${lat},${lng}`;\n  return fetchWeather(locationString);\n};","map":{"version":3,"names":["axios","fetchWeather","location","API_KEY","process","env","REACT_APP_VISUAL_CROSSING_API_KEY","console","error","Error","URL","response","get","currentConditions","days","resolvedAddress","data","current","temp","feelsLike","feelslike","humidity","windSpeed","windspeed","conditions","icon","precipProb","precipprob","datetime","forecast","slice","map","day","tempMax","tempmax","tempMin","tempmin","hourly","hours","hour","fetchWeatherByCoordinates","lat","lng","locationString"],"sources":["E:/Documents/Project Codes/Weather/weather-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n/**\r\n * Fetches weather data from Visual Crossing API\r\n * @param {string} location - Location name or coordinates (lat,lng)\r\n * @returns {Promise} - Promise containing weather data\r\n */\r\nexport const fetchWeather = async (location) => {\r\n    const API_KEY = process.env.REACT_APP_VISUAL_CROSSING_API_KEY || \"YOUR_VISUAL_CROSSING_API_KEY\"; // Use environment variable or fallback to placeholder\r\n    \r\n    if (API_KEY === \"YOUR_VISUAL_CROSSING_API_KEY\") {\r\n        console.error(\"API Key not configured. Please set the REACT_APP_VISUAL_CROSSING_API_KEY environment variable.\");\r\n        throw new Error(\"API Key not configured\");\r\n    }\r\n    const URL = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}?unitGroup=metric&key=${API_KEY}`;\r\n    \r\n    try {\r\n        const response = await axios.get(URL);\r\n        \r\n        // Process and return the weather data in a more usable format\r\n        const { currentConditions, days, resolvedAddress } = response.data;\r\n        \r\n        return {\r\n            current: {\r\n                temp: currentConditions.temp,\r\n                feelsLike: currentConditions.feelslike,\r\n                humidity: currentConditions.humidity,\r\n                windSpeed: currentConditions.windspeed,\r\n                conditions: currentConditions.conditions,\r\n                icon: currentConditions.icon,\r\n                precipProb: currentConditions.precipprob || 0,\r\n                datetime: currentConditions.datetime\r\n            },\r\n            location: resolvedAddress,\r\n            forecast: days.slice(0, 7).map(day => ({\r\n                datetime: day.datetime,\r\n                tempMax: day.tempmax,\r\n                tempMin: day.tempmin,\r\n                icon: day.icon,\r\n                conditions: day.conditions,\r\n                precipProb: day.precipprob || 0\r\n            })),\r\n            hourly: response.data.days[0].hours.map(hour => ({\r\n                datetime: hour.datetime,\r\n                temp: hour.temp,\r\n                icon: hour.icon,\r\n                conditions: hour.conditions,\r\n                precipProb: hour.precipprob || 0\r\n            }))\r\n        };\r\n    } catch (error) {\r\n        console.error(\"Error fetching weather data\", error);\r\n        throw error; // Re-throw to handle in components\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches weather data using geolocation coordinates\r\n * @param {number} lat - Latitude\r\n * @param {number} lng - Longitude\r\n * @returns {Promise} - Promise containing weather data\r\n */\r\nexport const fetchWeatherByCoordinates = async (lat, lng) => {\r\n    const locationString = `${lat},${lng}`;\r\n    return fetchWeather(locationString);\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iCAAiC,IAAI,8BAA8B,CAAC,CAAC;;EAEjG,IAAIH,OAAO,KAAK,8BAA8B,EAAE;IAC5CI,OAAO,CAACC,KAAK,CAAC,gGAAgG,CAAC;IAC/G,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7C;EACA,MAAMC,GAAG,GAAG,uFAAuFR,QAAQ,yBAAyBC,OAAO,EAAE;EAE7I,IAAI;IACA,MAAMQ,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACF,GAAG,CAAC;;IAErC;IACA,MAAM;MAAEG,iBAAiB;MAAEC,IAAI;MAAEC;IAAgB,CAAC,GAAGJ,QAAQ,CAACK,IAAI;IAElE,OAAO;MACHC,OAAO,EAAE;QACLC,IAAI,EAAEL,iBAAiB,CAACK,IAAI;QAC5BC,SAAS,EAAEN,iBAAiB,CAACO,SAAS;QACtCC,QAAQ,EAAER,iBAAiB,CAACQ,QAAQ;QACpCC,SAAS,EAAET,iBAAiB,CAACU,SAAS;QACtCC,UAAU,EAAEX,iBAAiB,CAACW,UAAU;QACxCC,IAAI,EAAEZ,iBAAiB,CAACY,IAAI;QAC5BC,UAAU,EAAEb,iBAAiB,CAACc,UAAU,IAAI,CAAC;QAC7CC,QAAQ,EAAEf,iBAAiB,CAACe;MAChC,CAAC;MACD1B,QAAQ,EAAEa,eAAe;MACzBc,QAAQ,EAAEf,IAAI,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAACC,GAAG,KAAK;QACnCJ,QAAQ,EAAEI,GAAG,CAACJ,QAAQ;QACtBK,OAAO,EAAED,GAAG,CAACE,OAAO;QACpBC,OAAO,EAAEH,GAAG,CAACI,OAAO;QACpBX,IAAI,EAAEO,GAAG,CAACP,IAAI;QACdD,UAAU,EAAEQ,GAAG,CAACR,UAAU;QAC1BE,UAAU,EAAEM,GAAG,CAACL,UAAU,IAAI;MAClC,CAAC,CAAC,CAAC;MACHU,MAAM,EAAE1B,QAAQ,CAACK,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAACwB,KAAK,CAACP,GAAG,CAACQ,IAAI,KAAK;QAC7CX,QAAQ,EAAEW,IAAI,CAACX,QAAQ;QACvBV,IAAI,EAAEqB,IAAI,CAACrB,IAAI;QACfO,IAAI,EAAEc,IAAI,CAACd,IAAI;QACfD,UAAU,EAAEe,IAAI,CAACf,UAAU;QAC3BE,UAAU,EAAEa,IAAI,CAACZ,UAAU,IAAI;MACnC,CAAC,CAAC;IACN,CAAC;EACL,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgC,yBAAyB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACzD,MAAMC,cAAc,GAAG,GAAGF,GAAG,IAAIC,GAAG,EAAE;EACtC,OAAOzC,YAAY,CAAC0C,cAAc,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}